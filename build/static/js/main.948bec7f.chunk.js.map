{"version":3,"sources":["App.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","API_URL","process","SOCKET_URL","state","data","inputData","getData","bind","assertThisInitialized","click","change","postData","_this2","socket","io","on","console","log","emit","concat","msg","_this3","fetch","then","response","json","setState","catch","error","method","headers","Content-Type","body","JSON","stringify","info","event","input","target","value","list","map","elm","index","react_default","a","createElement","key","className","onChange","type","onClick","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"4PA8FeA,cAxFX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAHVQ,QAAUC,OAESR,EAcnBS,WAAa,+BAXTT,EAAKU,MAAQ,CACTC,KAAM,GACNC,UAAW,IAGfZ,EAAKa,QAAUb,EAAKa,QAAQC,KAAbb,OAAAc,EAAA,EAAAd,QAAAc,EAAA,EAAAd,CAAAD,KACfA,EAAKgB,MAAQhB,EAAKgB,MAAMF,KAAXb,OAAAc,EAAA,EAAAd,QAAAc,EAAA,EAAAd,CAAAD,KACbA,EAAKiB,OAASjB,EAAKiB,OAAOH,KAAZb,OAAAc,EAAA,EAAAd,QAAAc,EAAA,EAAAd,CAAAD,KACdA,EAAKkB,SAAWlB,EAAKkB,SAASJ,KAAdb,OAAAc,EAAA,EAAAd,QAAAc,EAAA,EAAAd,CAAAD,KAXDA,mFAgBC,IAAAmB,EAAAhB,KACbiB,EAASC,IAAGlB,KAAKM,YAEvBW,EAAOE,GAAG,UAAU,WACnBC,QAAQC,IAAI,0BACZJ,EAAOK,KAAK,QAAS,QAAU,WAGhCL,EAAOE,GAAG,WAAY,SAACX,GACnBY,QAAQC,IAAR,eAAAE,OAA2Bf,EAAKgB,MAChCR,EAAKN,YAENV,KAAKU,4CAKC,IAAAe,EAAAzB,KACN0B,MAAK,GAAAH,OAAIvB,KAAKI,QAAT,UACJuB,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAnB,GACFiB,EAAKK,SAAS,CACVtB,KAAMA,MAGbuB,MAAM,SAAAC,GACHZ,QAAQY,MAAM,wBAAyBA,sCAItCxB,GACLkB,MAAK,GAAAH,OAAIvB,KAAKI,QAAT,SAAyB,CAC1B6B,OAAQ,OACRC,QAAS,CACLC,eAAgB,mCAEpBC,KAAMC,KAAKC,UAAU,CAAC9B,KAAMA,MAE/BmB,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAnB,GAAI,OAAIY,QAAQmB,KAAK/B,KAC1BuB,MAAM,SAAAC,GACHZ,QAAQY,MAAM,uBAAwBA,oCAIvCQ,GACHxC,KAAK8B,SAAS,CAACW,MAAOD,EAAME,OAAOC,wCAInCvB,QAAQC,IAAI,QAASrB,KAAKO,MAAMkC,OAChCzC,KAAKe,SAASf,KAAKO,MAAMkC,wCAIzB,IAAIG,EAAO5C,KAAKO,MAAMC,KAAKqC,IAAI,SAACC,EAAKC,GAAN,OAAgBC,EAAAC,EAAAC,cAAA,MAAIC,IAAKJ,GAAQD,KAChE,OACIE,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACXJ,EAAAC,EAAAC,cAAA,qCAEAF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,UACKN,GAELI,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,SAAOG,SAAUrD,KAAKc,OAAQwC,KAAK,SACnCN,EAAAC,EAAAC,cAAA,UAAQK,QAASvD,KAAKa,OAAtB,gBArFE2C,aCClBC,IAASC,OAAOV,EAAAC,EAAAC,cAACS,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.948bec7f.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport io from 'socket.io-client';\n\nclass App extends Component {\n    API_URL = process.env.REACT_APP_API_URL;\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            data: [],\n            inputData: \"\"\n        };\n\n        this.getData = this.getData.bind(this);\n        this.click = this.click.bind(this);\n        this.change = this.change.bind(this);\n        this.postData = this.postData.bind(this);\n    }\n\n    SOCKET_URL = 'http://localhost:8080/my_app';\n\n    componentDidMount() {\n     const socket = io(this.SOCKET_URL);\n\n     socket.on('connect',() => {\n      console.log(\"connected to socket.io\");\n      socket.emit('Hello', \"Signe\" , \"howdy\");\n     });\n\n     socket.on('new-data', (data) => {\n         console.log(`server msg: ${data.msg}`);\n         this.getData();\n     });\n        this.getData();\n    }\n\n\n\n    getData() {\n        fetch(`${this.API_URL}/data`)\n        .then(response => response.json())\n        .then(data => {\n            this.setState({\n                data: data\n            });\n        })\n        .catch(error => {\n            console.error(\"Error when fetching: \", error);\n        })\n    }\n\n    postData(data) {\n        fetch(`${this.API_URL}/data`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json; charset=utf-8\"\n            },\n            body: JSON.stringify({data: data})\n        })\n        .then(response => response.json())\n        .then(data => console.info(data))\n        .catch(error => {\n            console.error(\"Error when posting: \", error);\n        })\n    }\n\n    change(event) {\n        this.setState({input: event.target.value})\n    }\n\n    click() {\n        console.log(\"click\", this.state.input);\n        this.postData(this.state.input);\n    }\n\n    render() {\n        let list = this.state.data.map((elm, index) => <li key={index}>{elm}</li>);\n        return (\n            <div className=\"container\">\n                <h1>MERN Deployment Example</h1>\n\n                <p>Data from API:</p>\n                <ol>\n                    {list}\n                </ol>\n                <p>Post new data:</p>\n                <input onChange={this.change} type=\"text\"/>\n                <button onClick={this.click}>Post</button>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}